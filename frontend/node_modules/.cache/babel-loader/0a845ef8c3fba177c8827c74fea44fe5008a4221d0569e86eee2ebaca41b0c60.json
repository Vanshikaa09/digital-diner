{"ast":null,"code":"var _s = $RefreshSig$();\n// useCart.js\nimport { useContext } from 'react';\nimport { CartContext } from '../context/CartContext';\nexport const useCart = () => {\n  _s();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}; // // useCart.js\n// import { useState, useEffect } from 'react';\n\n// export const useCart = () => {\n//   const [items, setItems] = useState(() => {\n//     // Load cart from localStorage on initialization\n//     const savedCart = localStorage.getItem('cart');\n//     return savedCart ? JSON.parse(savedCart) : [];\n//   });\n\n//   // Save cart to localStorage whenever it changes\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(items));\n//   }, [items]);\n\n//   // Calculate total price\n//   const totalPrice = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n\n//   // Calculate total items\n//   const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);\n\n//   // Add item to cart\n//   const addItem = (menuItem) => {\n//     setItems(prevItems => {\n//       // Check if item already exists in cart\n//       const existingItemIndex = prevItems.findIndex(item => item.menuItemId === menuItem.id);\n\n//       if (existingItemIndex >= 0) {\n//         // If item exists, create a new array with the updated quantity\n//         const newItems = [...prevItems];\n//         newItems[existingItemIndex] = {\n//           ...newItems[existingItemIndex],\n//           quantity: newItems[existingItemIndex].quantity + 1\n//         };\n//         return newItems;\n//       } else {\n//         // If item doesn't exist, add it to the cart with correct price formatting\n//         return [...prevItems, {\n//           menuItemId: menuItem.id,\n//           name: menuItem.name,\n//           price: menuItem.price / 100, // Convert price from cents to rupees for display\n//           quantity: 1\n//         }];\n//       }\n//     });\n//   };\n\n//   // Update item quantity\n//   const updateQuantity = (menuItemId, quantity) => {\n//     setItems(prevItems => \n//       prevItems.map(item => \n//         item.menuItemId === menuItemId ? { ...item, quantity } : item\n//       )\n//     );\n//   };\n\n//   // Remove item from cart\n//   const removeItem = (menuItemId) => {\n//     setItems(prevItems => prevItems.filter(item => item.menuItemId !== menuItemId));\n//   };\n\n//   // Clear cart\n//   const clearCart = () => {\n//     setItems([]);\n//   };\n\n//   return {\n//     items,\n//     addItem,\n//     updateQuantity,\n//     removeItem,\n//     clearCart,\n//     totalPrice,\n//     totalItems\n//   };\n// };\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");","map":{"version":3,"names":["useContext","CartContext","useCart","_s","context","undefined","Error"],"sources":["/Users/vanshikamaheshwari/Desktop/untitled folder 2/frontend/src/hooks/useCart.js"],"sourcesContent":["// useCart.js\nimport { useContext } from 'react';\nimport { CartContext } from '../context/CartContext';\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  \n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  \n  return context;\n};// // useCart.js\n// import { useState, useEffect } from 'react';\n\n// export const useCart = () => {\n//   const [items, setItems] = useState(() => {\n//     // Load cart from localStorage on initialization\n//     const savedCart = localStorage.getItem('cart');\n//     return savedCart ? JSON.parse(savedCart) : [];\n//   });\n\n//   // Save cart to localStorage whenever it changes\n//   useEffect(() => {\n//     localStorage.setItem('cart', JSON.stringify(items));\n//   }, [items]);\n\n//   // Calculate total price\n//   const totalPrice = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  \n//   // Calculate total items\n//   const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);\n\n//   // Add item to cart\n//   const addItem = (menuItem) => {\n//     setItems(prevItems => {\n//       // Check if item already exists in cart\n//       const existingItemIndex = prevItems.findIndex(item => item.menuItemId === menuItem.id);\n      \n//       if (existingItemIndex >= 0) {\n//         // If item exists, create a new array with the updated quantity\n//         const newItems = [...prevItems];\n//         newItems[existingItemIndex] = {\n//           ...newItems[existingItemIndex],\n//           quantity: newItems[existingItemIndex].quantity + 1\n//         };\n//         return newItems;\n//       } else {\n//         // If item doesn't exist, add it to the cart with correct price formatting\n//         return [...prevItems, {\n//           menuItemId: menuItem.id,\n//           name: menuItem.name,\n//           price: menuItem.price / 100, // Convert price from cents to rupees for display\n//           quantity: 1\n//         }];\n//       }\n//     });\n//   };\n\n//   // Update item quantity\n//   const updateQuantity = (menuItemId, quantity) => {\n//     setItems(prevItems => \n//       prevItems.map(item => \n//         item.menuItemId === menuItemId ? { ...item, quantity } : item\n//       )\n//     );\n//   };\n\n//   // Remove item from cart\n//   const removeItem = (menuItemId) => {\n//     setItems(prevItems => prevItems.filter(item => item.menuItemId !== menuItemId));\n//   };\n\n//   // Clear cart\n//   const clearCart = () => {\n//     setItems([]);\n//   };\n\n//   return {\n//     items,\n//     addItem,\n//     updateQuantity,\n//     removeItem,\n//     clearCart,\n//     totalPrice,\n//     totalItems\n//   };\n// };"],"mappings":";AAAA;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGJ,UAAU,CAACC,WAAW,CAAC;EAEvC,IAAIG,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA,OAAOF,OAAO;AAChB,CAAC,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAD,EAAA,CAnFaD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}