{"ast":null,"code":"var _s = $RefreshSig$();\n// useCart.js\nimport { useState, useEffect } from 'react';\nexport const useCart = () => {\n  _s();\n  const [items, setItems] = useState(() => {\n    // Load cart from localStorage on initialization\n    const savedCart = localStorage.getItem('cart');\n    return savedCart ? JSON.parse(savedCart) : [];\n  });\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(items));\n  }, [items]);\n\n  // Calculate total price\n  const totalPrice = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n\n  // Calculate total items\n  const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);\n\n  // Add item to cart\n  const addItem = menuItem => {\n    setItems(prevItems => {\n      // Check if item already exists in cart\n      const existingItemIndex = prevItems.findIndex(item => item.menuItemId === menuItem.id);\n      if (existingItemIndex >= 0) {\n        // If item exists, create a new array with the updated quantity\n        const newItems = [...prevItems];\n        newItems[existingItemIndex] = {\n          ...newItems[existingItemIndex],\n          quantity: newItems[existingItemIndex].quantity + 1\n        };\n        return newItems;\n      } else {\n        // If item doesn't exist, add it to the cart\n        return [...prevItems, {\n          menuItemId: menuItem.id,\n          name: menuItem.name,\n          price: menuItem.price,\n          quantity: 1\n        }];\n      }\n    });\n  };\n\n  // Update item quantity\n  const updateQuantity = (menuItemId, quantity) => {\n    setItems(prevItems => prevItems.map(item => item.menuItemId === menuItemId ? {\n      ...item,\n      quantity\n    } : item));\n  };\n\n  // Remove item from cart\n  const removeItem = menuItemId => {\n    setItems(prevItems => prevItems.filter(item => item.menuItemId !== menuItemId));\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setItems([]);\n  };\n  return {\n    items,\n    addItem,\n    updateQuantity,\n    removeItem,\n    clearCart,\n    totalPrice,\n    totalItems\n  };\n};\n\n// import { CartContext } from '../contexts/CartContext';\n// import { useContext } from 'react';\n\n// export function useCart() {\n//   const context = useContext(CartContext);\n//   if (context === undefined) {\n//     throw new Error('useCart must be used within a CartProvider');\n//   }\n//   return context;\n// }\n_s(useCart, \"Xk08nqZfibL3zQt6x+oEwhynY6o=\");","map":{"version":3,"names":["useState","useEffect","useCart","_s","items","setItems","savedCart","localStorage","getItem","JSON","parse","setItem","stringify","totalPrice","reduce","sum","item","price","quantity","totalItems","addItem","menuItem","prevItems","existingItemIndex","findIndex","menuItemId","id","newItems","name","updateQuantity","map","removeItem","filter","clearCart"],"sources":["/Users/vanshikamaheshwari/Desktop/untitled folder 2/frontend/src/hooks/useCart.js"],"sourcesContent":["// useCart.js\nimport { useState, useEffect } from 'react';\n\nexport const useCart = () => {\n  const [items, setItems] = useState(() => {\n    // Load cart from localStorage on initialization\n    const savedCart = localStorage.getItem('cart');\n    return savedCart ? JSON.parse(savedCart) : [];\n  });\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(items));\n  }, [items]);\n\n  // Calculate total price\n  const totalPrice = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  \n  // Calculate total items\n  const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);\n\n  // Add item to cart\n  const addItem = (menuItem) => {\n    setItems(prevItems => {\n      // Check if item already exists in cart\n      const existingItemIndex = prevItems.findIndex(item => item.menuItemId === menuItem.id);\n      \n      if (existingItemIndex >= 0) {\n        // If item exists, create a new array with the updated quantity\n        const newItems = [...prevItems];\n        newItems[existingItemIndex] = {\n          ...newItems[existingItemIndex],\n          quantity: newItems[existingItemIndex].quantity + 1\n        };\n        return newItems;\n      } else {\n        // If item doesn't exist, add it to the cart\n        return [...prevItems, {\n          menuItemId: menuItem.id,\n          name: menuItem.name,\n          price: menuItem.price,\n          quantity: 1\n        }];\n      }\n    });\n  };\n\n  // Update item quantity\n  const updateQuantity = (menuItemId, quantity) => {\n    setItems(prevItems => \n      prevItems.map(item => \n        item.menuItemId === menuItemId ? { ...item, quantity } : item\n      )\n    );\n  };\n\n  // Remove item from cart\n  const removeItem = (menuItemId) => {\n    setItems(prevItems => prevItems.filter(item => item.menuItemId !== menuItemId));\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setItems([]);\n  };\n\n  return {\n    items,\n    addItem,\n    updateQuantity,\n    removeItem,\n    clearCart,\n    totalPrice,\n    totalItems\n  };\n};\n\n// import { CartContext } from '../contexts/CartContext';\n// import { useContext } from 'react';\n\n// export function useCart() {\n//   const context = useContext(CartContext);\n//   if (context === undefined) {\n//     throw new Error('useCart must be used within a CartProvider');\n//   }\n//   return context;\n// }\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,MAAM;IACvC;IACA,MAAMM,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,OAAOF,SAAS,GAAGG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,GAAG,EAAE;EAC/C,CAAC,CAAC;;EAEF;EACAL,SAAS,CAAC,MAAM;IACdM,YAAY,CAACI,OAAO,CAAC,MAAM,EAAEF,IAAI,CAACG,SAAS,CAACR,KAAK,CAAC,CAAC;EACrD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMS,UAAU,GAAGT,KAAK,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAIC,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACE,QAAS,EAAE,CAAC,CAAC;;EAErF;EACA,MAAMC,UAAU,GAAGf,KAAK,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;;EAEtE;EACA,MAAME,OAAO,GAAIC,QAAQ,IAAK;IAC5BhB,QAAQ,CAACiB,SAAS,IAAI;MACpB;MACA,MAAMC,iBAAiB,GAAGD,SAAS,CAACE,SAAS,CAACR,IAAI,IAAIA,IAAI,CAACS,UAAU,KAAKJ,QAAQ,CAACK,EAAE,CAAC;MAEtF,IAAIH,iBAAiB,IAAI,CAAC,EAAE;QAC1B;QACA,MAAMI,QAAQ,GAAG,CAAC,GAAGL,SAAS,CAAC;QAC/BK,QAAQ,CAACJ,iBAAiB,CAAC,GAAG;UAC5B,GAAGI,QAAQ,CAACJ,iBAAiB,CAAC;UAC9BL,QAAQ,EAAES,QAAQ,CAACJ,iBAAiB,CAAC,CAACL,QAAQ,GAAG;QACnD,CAAC;QACD,OAAOS,QAAQ;MACjB,CAAC,MAAM;QACL;QACA,OAAO,CAAC,GAAGL,SAAS,EAAE;UACpBG,UAAU,EAAEJ,QAAQ,CAACK,EAAE;UACvBE,IAAI,EAAEP,QAAQ,CAACO,IAAI;UACnBX,KAAK,EAAEI,QAAQ,CAACJ,KAAK;UACrBC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMW,cAAc,GAAGA,CAACJ,UAAU,EAAEP,QAAQ,KAAK;IAC/Cb,QAAQ,CAACiB,SAAS,IAChBA,SAAS,CAACQ,GAAG,CAACd,IAAI,IAChBA,IAAI,CAACS,UAAU,KAAKA,UAAU,GAAG;MAAE,GAAGT,IAAI;MAAEE;IAAS,CAAC,GAAGF,IAC3D,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMe,UAAU,GAAIN,UAAU,IAAK;IACjCpB,QAAQ,CAACiB,SAAS,IAAIA,SAAS,CAACU,MAAM,CAAChB,IAAI,IAAIA,IAAI,CAACS,UAAU,KAAKA,UAAU,CAAC,CAAC;EACjF,CAAC;;EAED;EACA,MAAMQ,SAAS,GAAGA,CAAA,KAAM;IACtB5B,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,OAAO;IACLD,KAAK;IACLgB,OAAO;IACPS,cAAc;IACdE,UAAU;IACVE,SAAS;IACTpB,UAAU;IACVM;EACF,CAAC;AACH,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAhB,EAAA,CAnFaD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}