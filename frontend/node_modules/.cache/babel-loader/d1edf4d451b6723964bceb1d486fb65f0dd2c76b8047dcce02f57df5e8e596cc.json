{"ast":null,"code":"// import axios from \"axios\"\n\n// const API_URL = \"http://localhost:3000/api\"\n\n// // Menu Items\n// export const fetchMenu = async () => {\n//   try {\n//     console.log(\"Fetching menu from API...\")\n//     const response = await axios.get(`${API_URL}/menu`)\n//     console.log(\"Menu API response:\", response.data)\n//     return response.data\n//   } catch (error) {\n//     console.error(\"Error fetching menu:\", error)\n//     // Return mock data for development if API is not available\n//     return [\n//       {\n//         id: 1,\n//         name: \"Veggie Burger\",\n//         description: \"Fresh veggie patty with lettuce, tomato, and special sauce\",\n//         price: 499,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Veggie+Burger\",\n//       },\n//       {\n//         id: 2,\n//         name: \"Chicken Pizza\",\n//         description: \"Homemade pizza with grilled chicken, bell peppers, and mozzarella\",\n//         price: 799,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Chicken+Pizza\",\n//       },\n//       {\n//         id: 3,\n//         name: \"Chocolate Milkshake\",\n//         description: \"Creamy chocolate milkshake with whipped cream\",\n//         price: 249,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Chocolate+Milkshake\",\n//       },\n//       {\n//         id: 4,\n//         name: \"Fish & Chips\",\n//         description: \"Crispy fried fish fillet with seasoned French fries\",\n//         price: 599,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Fish+And+Chips\",\n//       },\n//       {\n//         id: 5,\n//         name: \"Caesar Salad\",\n//         description: \"Fresh romaine lettuce with Caesar dressing, croutons, and parmesan\",\n//         price: 349,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Caesar+Salad\",\n//       },\n//       {\n//         id: 6,\n//         name: \"Veg Noodles\",\n//         description: \"Stir-fried noodles with mixed vegetables in soy sauce\",\n//         price: 399,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Veg+Noodles\",\n//       },\n//     ]\n//   }\n// }\n\n// // Orders\n// export const createOrder = async (orderData) => {\n//   try {\n//     console.log(\"Creating order with data:\", orderData)\n//     const response = await axios.post(`${API_URL}/orders`, orderData)\n//     console.log(\"Create order response:\", response.data)\n//     return response.data\n//   } catch (error) {\n//     console.error(\"Error creating order:\", error.response?.data || error.message)\n//     // Mock response for development\n//     return {\n//       id: Math.floor(Math.random() * 10000),\n//       ...orderData,\n//       created_at: new Date().toISOString(),\n//       status: \"pending\",\n//     }\n//   }\n// }\n\n// // Function to fetch all orders\n// export const fetchOrders = async () => {\n//   try {\n//     console.log(\"Fetching orders from API...\")\n//     const response = await axios.get(`${API_URL}/orders`)\n//     console.log(\"Orders API response:\", response.data)\n\n//     // Ensure total_amount is a number\n//     const orders = response.data.map((order) => ({\n//       ...order,\n//       total_amount: order.total_amount !== null && order.total_amount !== undefined ? Number(order.total_amount) : 0,\n//     }))\n\n//     return orders\n//   } catch (error) {\n//     console.error(\"Error fetching orders:\", error.response?.data || error.message)\n//     // Mock data for development\n//     return [\n//       {\n//         id: 1001,\n//         customer_name: \"John Doe\",\n//         customer_email: \"john@example.com\",\n//         customer_phone: \"555-123-4567\",\n//         total_amount: 1048,\n//         status: \"completed\",\n//         items: [\n//           { name: \"Veggie Burger\", quantity: 1, price: 499 },\n//           { name: \"Chocolate Milkshake\", quantity: 1, price: 249 },\n//           { name: \"Caesar Salad\", quantity: 1, price: 300 },\n//         ],\n//         created_at: \"2025-04-30T10:45:00Z\",\n//       },\n//       {\n//         id: 1002,\n//         customer_name: \"Jane Smith\",\n//         customer_email: \"jane@example.com\",\n//         customer_phone: \"555-987-6543\",\n//         total_amount: 799,\n//         status: \"pending\",\n//         items: [{ name: \"Chicken Pizza\", quantity: 1, price: 799 }],\n//         created_at: \"2025-04-30T11:15:00Z\",\n//       },\n//     ]\n//   }\n// }\n\n// export const fetchUserOrders = async (phone) => {\n//   try {\n//     console.log(\"Fetching user orders from API for phone:\", phone);\n//     // Ensure we only query with phone if it's provided\n//     const url = phone ? `${API_URL}/orders?phone=${phone}` : `${API_URL}/orders`;\n//     const response = await axios.get(url);\n//     console.log(\"User Orders API response:\", response.data);\n\n//     // Ensure total_amount is a number\n//     const orders = response.data.map((order) => ({\n//       ...order,\n//       total_amount: order.total_amount !== null && order.total_amount !== undefined ? Number(order.total_amount) : 0,\n//     }));\n\n//     return orders;\n//   } catch (error) {\n//     console.error(\"Error fetching user orders:\", error.response?.data || error.message);\n\n//     // If API call fails, return mock data filtered by phone number\n//     const mockOrders = [\n//       {\n//         id: 1001,\n//         customer_name: \"John Doe\",\n//         customer_email: \"john@example.com\",\n//         customer_phone: \"555-123-4567\",\n//         total_amount: 1048,\n//         status: \"completed\",\n//         items: [\n//           { name: \"Veggie Burger\", quantity: 1, price: 499 },\n//           { name: \"Chocolate Milkshake\", quantity: 1, price: 249 },\n//           { name: \"Caesar Salad\", quantity: 1, price: 300 },\n//         ],\n//         created_at: \"2025-04-30T10:45:00Z\",\n//       },\n//       {\n//         id: 1002,\n//         customer_name: \"Jane Smith\",\n//         customer_email: \"jane@example.com\",\n//         customer_phone: \"555-987-6543\",\n//         total_amount: 799,\n//         status: \"pending\",\n//         items: [{ name: \"Chicken Pizza\", quantity: 1, price: 799 }],\n//         created_at: \"2025-04-30T11:15:00Z\",\n//       },\n//     ];\n\n//     // If phone is provided, filter the mock orders by phone number\n//     if (phone) {\n//       return mockOrders.filter(order => order.customer_phone === phone);\n//     }\n\n//     return mockOrders;\n//   }\n// }\n\n// // Function to fetch order items\n// export const fetchOrderItems = async (orderId) => {\n//   try {\n//     console.log(\"Fetching order items from API for order ID:\", orderId);\n//     const response = await axios.get(`${API_URL}/order-items/${orderId}`);\n//     console.log(\"Order items API response:\", response.data);\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error fetching order items:\", error.response?.data || error.message);\n//     return []; // Return empty array when API is unavailable\n//   }\n// }\nimport axios from 'axios';\nconst API_URL = 'http://localhost:3000/api';\nexport const fetchMenu = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/menu`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching menu:', error);\n    return [];\n  }\n};\nexport const createOrder = async orderData => {\n  try {\n    const response = await axios.post(`${API_URL}/orders`, orderData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order:', error);\n    throw error;\n  }\n};\nexport const fetchOrders = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/orders`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching orders:', error);\n    return [];\n  }\n};\nexport const createOrderItem = async orderItemData => {\n  try {\n    const response = await axios.post(`${API_URL}/order-items`, orderItemData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order item:', error);\n    throw error;\n  }\n};\nexport const fetchOrderItems = async orderId => {\n  try {\n    const response = await axios.get(`${API_URL}/order-items/${orderId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching order items:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","API_URL","fetchMenu","response","get","data","error","console","createOrder","orderData","post","fetchOrders","createOrderItem","orderItemData","fetchOrderItems","orderId"],"sources":["/Users/vanshikamaheshwari/Desktop/untitled folder 2/frontend/src/api.js"],"sourcesContent":["// import axios from \"axios\"\n\n// const API_URL = \"http://localhost:3000/api\"\n\n// // Menu Items\n// export const fetchMenu = async () => {\n//   try {\n//     console.log(\"Fetching menu from API...\")\n//     const response = await axios.get(`${API_URL}/menu`)\n//     console.log(\"Menu API response:\", response.data)\n//     return response.data\n//   } catch (error) {\n//     console.error(\"Error fetching menu:\", error)\n//     // Return mock data for development if API is not available\n//     return [\n//       {\n//         id: 1,\n//         name: \"Veggie Burger\",\n//         description: \"Fresh veggie patty with lettuce, tomato, and special sauce\",\n//         price: 499,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Veggie+Burger\",\n//       },\n//       {\n//         id: 2,\n//         name: \"Chicken Pizza\",\n//         description: \"Homemade pizza with grilled chicken, bell peppers, and mozzarella\",\n//         price: 799,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Chicken+Pizza\",\n//       },\n//       {\n//         id: 3,\n//         name: \"Chocolate Milkshake\",\n//         description: \"Creamy chocolate milkshake with whipped cream\",\n//         price: 249,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Chocolate+Milkshake\",\n//       },\n//       {\n//         id: 4,\n//         name: \"Fish & Chips\",\n//         description: \"Crispy fried fish fillet with seasoned French fries\",\n//         price: 599,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Fish+And+Chips\",\n//       },\n//       {\n//         id: 5,\n//         name: \"Caesar Salad\",\n//         description: \"Fresh romaine lettuce with Caesar dressing, croutons, and parmesan\",\n//         price: 349,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Caesar+Salad\",\n//       },\n//       {\n//         id: 6,\n//         name: \"Veg Noodles\",\n//         description: \"Stir-fried noodles with mixed vegetables in soy sauce\",\n//         price: 399,\n//         imageUrl: \"https://via.placeholder.com/300x200?text=Veg+Noodles\",\n//       },\n//     ]\n//   }\n// }\n\n// // Orders\n// export const createOrder = async (orderData) => {\n//   try {\n//     console.log(\"Creating order with data:\", orderData)\n//     const response = await axios.post(`${API_URL}/orders`, orderData)\n//     console.log(\"Create order response:\", response.data)\n//     return response.data\n//   } catch (error) {\n//     console.error(\"Error creating order:\", error.response?.data || error.message)\n//     // Mock response for development\n//     return {\n//       id: Math.floor(Math.random() * 10000),\n//       ...orderData,\n//       created_at: new Date().toISOString(),\n//       status: \"pending\",\n//     }\n//   }\n// }\n\n// // Function to fetch all orders\n// export const fetchOrders = async () => {\n//   try {\n//     console.log(\"Fetching orders from API...\")\n//     const response = await axios.get(`${API_URL}/orders`)\n//     console.log(\"Orders API response:\", response.data)\n\n//     // Ensure total_amount is a number\n//     const orders = response.data.map((order) => ({\n//       ...order,\n//       total_amount: order.total_amount !== null && order.total_amount !== undefined ? Number(order.total_amount) : 0,\n//     }))\n\n//     return orders\n//   } catch (error) {\n//     console.error(\"Error fetching orders:\", error.response?.data || error.message)\n//     // Mock data for development\n//     return [\n//       {\n//         id: 1001,\n//         customer_name: \"John Doe\",\n//         customer_email: \"john@example.com\",\n//         customer_phone: \"555-123-4567\",\n//         total_amount: 1048,\n//         status: \"completed\",\n//         items: [\n//           { name: \"Veggie Burger\", quantity: 1, price: 499 },\n//           { name: \"Chocolate Milkshake\", quantity: 1, price: 249 },\n//           { name: \"Caesar Salad\", quantity: 1, price: 300 },\n//         ],\n//         created_at: \"2025-04-30T10:45:00Z\",\n//       },\n//       {\n//         id: 1002,\n//         customer_name: \"Jane Smith\",\n//         customer_email: \"jane@example.com\",\n//         customer_phone: \"555-987-6543\",\n//         total_amount: 799,\n//         status: \"pending\",\n//         items: [{ name: \"Chicken Pizza\", quantity: 1, price: 799 }],\n//         created_at: \"2025-04-30T11:15:00Z\",\n//       },\n//     ]\n//   }\n// }\n\n// export const fetchUserOrders = async (phone) => {\n//   try {\n//     console.log(\"Fetching user orders from API for phone:\", phone);\n//     // Ensure we only query with phone if it's provided\n//     const url = phone ? `${API_URL}/orders?phone=${phone}` : `${API_URL}/orders`;\n//     const response = await axios.get(url);\n//     console.log(\"User Orders API response:\", response.data);\n\n//     // Ensure total_amount is a number\n//     const orders = response.data.map((order) => ({\n//       ...order,\n//       total_amount: order.total_amount !== null && order.total_amount !== undefined ? Number(order.total_amount) : 0,\n//     }));\n\n//     return orders;\n//   } catch (error) {\n//     console.error(\"Error fetching user orders:\", error.response?.data || error.message);\n    \n//     // If API call fails, return mock data filtered by phone number\n//     const mockOrders = [\n//       {\n//         id: 1001,\n//         customer_name: \"John Doe\",\n//         customer_email: \"john@example.com\",\n//         customer_phone: \"555-123-4567\",\n//         total_amount: 1048,\n//         status: \"completed\",\n//         items: [\n//           { name: \"Veggie Burger\", quantity: 1, price: 499 },\n//           { name: \"Chocolate Milkshake\", quantity: 1, price: 249 },\n//           { name: \"Caesar Salad\", quantity: 1, price: 300 },\n//         ],\n//         created_at: \"2025-04-30T10:45:00Z\",\n//       },\n//       {\n//         id: 1002,\n//         customer_name: \"Jane Smith\",\n//         customer_email: \"jane@example.com\",\n//         customer_phone: \"555-987-6543\",\n//         total_amount: 799,\n//         status: \"pending\",\n//         items: [{ name: \"Chicken Pizza\", quantity: 1, price: 799 }],\n//         created_at: \"2025-04-30T11:15:00Z\",\n//       },\n//     ];\n    \n//     // If phone is provided, filter the mock orders by phone number\n//     if (phone) {\n//       return mockOrders.filter(order => order.customer_phone === phone);\n//     }\n    \n//     return mockOrders;\n//   }\n// }\n\n// // Function to fetch order items\n// export const fetchOrderItems = async (orderId) => {\n//   try {\n//     console.log(\"Fetching order items from API for order ID:\", orderId);\n//     const response = await axios.get(`${API_URL}/order-items/${orderId}`);\n//     console.log(\"Order items API response:\", response.data);\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error fetching order items:\", error.response?.data || error.message);\n//     return []; // Return empty array when API is unavailable\n//   }\n// }\nimport axios from 'axios';\n\nconst API_URL = 'http://localhost:3000/api';\n\nexport const fetchMenu = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/menu`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching menu:', error);\n    return [];\n  }\n};\n\nexport const createOrder = async (orderData) => {\n  try {\n    const response = await axios.post(`${API_URL}/orders`, orderData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order:', error);\n    throw error;\n  }\n};\n\nexport const fetchOrders = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/orders`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching orders:', error);\n    return [];\n  }\n};\n\nexport const createOrderItem = async (orderItemData) => {\n  try {\n    const response = await axios.post(`${API_URL}/order-items`, orderItemData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order item:', error);\n    throw error;\n  }\n};\n\nexport const fetchOrderItems = async (orderId) => {\n  try {\n    const response = await axios.get(`${API_URL}/order-items/${orderId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching order items:', error);\n    return [];\n  }\n};\n"],"mappingszB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,OAAO,CAAC;IACnD,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,SAAS,EAAEQ,SAAS,CAAC;IACjE,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,SAAS,CAAC;IACrD,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMM,eAAe,GAAG,MAAOC,aAAa,IAAK;EACtD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMH,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,cAAc,EAAEY,aAAa,CAAC;IAC1E,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMQ,eAAe,GAAG,MAAOC,OAAO,IAAK;EAChD,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,gBAAgBc,OAAO,EAAE,CAAC;IACrE,OAAOZ,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}