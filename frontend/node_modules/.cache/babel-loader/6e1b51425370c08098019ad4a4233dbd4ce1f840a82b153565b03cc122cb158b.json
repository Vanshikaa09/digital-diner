{"ast":null,"code":"// \"use client\";\n\n// import { createContext, useCallback, useEffect, useMemo, useReducer } from 'react';\n\n// // Initial cart state\n// const initialState = {\n//   items: [],\n// };\n\n// // Complete rewrite of the cart reducer with detailed comments\n// function cartReducer(state, action) {\n//   console.log('Cart reducer action:', action.type, action.payload);\n//   console.log('Current state before action:', state);\n\n//   switch (action.type) {\n//     case 'ADD_ITEM': {\n//       // Log what's being received\n//       console.log('Adding item with id:', action.payload.id);\n\n//       // Check if item exists using the correct id\n//       const existingItemIndex = state.items.findIndex(\n//         (item) => item.menuItemId === action.payload.id\n//       );\n\n//       console.log('Existing item index:', existingItemIndex);\n\n//       if (existingItemIndex > -1) {\n//         // Item exists, increment quantity\n//         console.log('Updating existing item at index:', existingItemIndex);\n//         const updatedItems = [...state.items];\n//         updatedItems[existingItemIndex] = {\n//           ...updatedItems[existingItemIndex],\n//           quantity: updatedItems[existingItemIndex].quantity + 1,\n//         };\n\n//         const newState = { ...state, items: updatedItems };\n//         console.log('New state after update:', newState);\n//         return newState;\n//       } else {\n//         // Add new item with careful property mapping\n//         console.log('Adding new item to cart');\n//         const newItem = {\n//           menuItemId: action.payload.id,\n//           name: action.payload.name,\n//           // Store price as-is without division\n//           price: action.payload.price,\n//           quantity: 1,\n//         };\n\n//         console.log('New item being added:', newItem);\n//         const newState = { ...state, items: [...state.items, newItem] };\n//         console.log('New state after adding:', newState);\n//         return newState;\n//       }\n//     }\n\n//     case 'REMOVE_ITEM': {\n//       console.log('Removing item with menuItemId:', action.payload.menuItemId);\n//       const updatedItems = state.items.filter(\n//         (item) => item.menuItemId !== action.payload.menuItemId\n//       );\n//       return { ...state, items: updatedItems };\n//     }\n\n//     case 'UPDATE_QUANTITY': {\n//       const { menuItemId, quantity } = action.payload;\n//       console.log('Updating quantity for item:', menuItemId, 'to', quantity);\n\n//       if (quantity <= 0) {\n//         // Remove item if quantity is zero or less\n//         return cartReducer(state, { \n//           type: 'REMOVE_ITEM', \n//           payload: { menuItemId } \n//         });\n//       }\n\n//       const updatedItems = state.items.map((item) =>\n//         item.menuItemId === menuItemId ? { ...item, quantity } : item\n//       );\n\n//       return { ...state, items: updatedItems };\n//     }\n\n//     case 'CLEAR_CART':\n//       console.log('Clearing cart');\n//       return initialState;\n\n//     default:\n//       console.log('Unknown action type:', action.type);\n//       return state;\n//   }\n// }\n\n// export const CartContext = createContext(undefined);\n\n// export function CartProvider({ children }) {\n//   // Initialize cart state with localStorage if available\n//   const [state, dispatch] = useReducer(cartReducer, initialState, () => {\n//     try {\n//       if (typeof window !== 'undefined') {\n//         const savedCart = localStorage.getItem('cart');\n//         if (savedCart) {\n//           const parsedCart = JSON.parse(savedCart);\n//           console.log('Loaded cart from localStorage:', parsedCart);\n//           return { items: parsedCart };\n//         }\n//       }\n//     } catch (e) {\n//       console.error('Error loading cart from localStorage:', e);\n//     }\n//     return initialState;\n//   });\n\n//   // Save cart to localStorage whenever it changes\n//   useEffect(() => {\n//     try {\n//       if (typeof window !== 'undefined') {\n//         console.log('Saving cart to localStorage:', state.items);\n//         localStorage.setItem('cart', JSON.stringify(state.items));\n//       }\n//     } catch (e) {\n//       console.error('Error saving cart to localStorage:', e);\n//     }\n//   }, [state.items]);\n\n//   // Cart action functions with enhanced logging\n//   const addItem = useCallback((item) => {\n//     console.log('addItem function called with:', item);\n//     dispatch({ type: 'ADD_ITEM', payload: item });\n//   }, []);\n\n//   const removeItem = useCallback((menuItemId) => {\n//     console.log('removeItem function called with menuItemId:', menuItemId);\n//     dispatch({ type: 'REMOVE_ITEM', payload: { menuItemId } });\n//   }, []);\n\n//   const updateQuantity = useCallback((menuItemId, quantity) => {\n//     console.log('updateQuantity function called:', menuItemId, quantity);\n//     dispatch({ type: 'UPDATE_QUANTITY', payload: { menuItemId, quantity } });\n//   }, []);\n\n//   const clearCart = useCallback(() => {\n//     console.log('clearCart function called');\n//     dispatch({ type: 'CLEAR_CART' });\n//   }, []);\n\n//   // Calculate total price (without dividing by 100)\n//   const totalPrice = useMemo(() => {\n//     const total = state.items.reduce(\n//       (total, item) => total + item.price * item.quantity, \n//       0\n//     );\n//     console.log('Calculated totalPrice:', total);\n//     return total;\n//   }, [state.items]);\n\n//   // Calculate total items\n//   const totalItems = useMemo(() => {\n//     const count = state.items.reduce(\n//       (total, item) => total + item.quantity, \n//       0\n//     );\n//     console.log('Calculated totalItems:', count);\n//     return count;\n//   }, [state.items]);\n\n//   // Create the context value with all cart functions\n//   const value = useMemo(() => ({\n//     items: state.items,\n//     addItem,\n//     removeItem,\n//     updateQuantity,\n//     clearCart,\n//     totalPrice,\n//     totalItems,\n//   }), [\n//     state.items, \n//     addItem, \n//     removeItem, \n//     updateQuantity, \n//     clearCart, \n//     totalPrice, \n//     totalItems\n//   ]);\n\n//   return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n// }","map":{"version":3,"names":[],"sources":["/Users/vanshikamaheshwari/Desktop/untitled folder 2/frontend/src/contexts/CartContext.jsx"],"sourcesContent":["// \"use client\";\n\n// import { createContext, useCallback, useEffect, useMemo, useReducer } from 'react';\n\n// // Initial cart state\n// const initialState = {\n//   items: [],\n// };\n\n// // Complete rewrite of the cart reducer with detailed comments\n// function cartReducer(state, action) {\n//   console.log('Cart reducer action:', action.type, action.payload);\n//   console.log('Current state before action:', state);\n  \n//   switch (action.type) {\n//     case 'ADD_ITEM': {\n//       // Log what's being received\n//       console.log('Adding item with id:', action.payload.id);\n      \n//       // Check if item exists using the correct id\n//       const existingItemIndex = state.items.findIndex(\n//         (item) => item.menuItemId === action.payload.id\n//       );\n      \n//       console.log('Existing item index:', existingItemIndex);\n      \n//       if (existingItemIndex > -1) {\n//         // Item exists, increment quantity\n//         console.log('Updating existing item at index:', existingItemIndex);\n//         const updatedItems = [...state.items];\n//         updatedItems[existingItemIndex] = {\n//           ...updatedItems[existingItemIndex],\n//           quantity: updatedItems[existingItemIndex].quantity + 1,\n//         };\n        \n//         const newState = { ...state, items: updatedItems };\n//         console.log('New state after update:', newState);\n//         return newState;\n//       } else {\n//         // Add new item with careful property mapping\n//         console.log('Adding new item to cart');\n//         const newItem = {\n//           menuItemId: action.payload.id,\n//           name: action.payload.name,\n//           // Store price as-is without division\n//           price: action.payload.price,\n//           quantity: 1,\n//         };\n        \n//         console.log('New item being added:', newItem);\n//         const newState = { ...state, items: [...state.items, newItem] };\n//         console.log('New state after adding:', newState);\n//         return newState;\n//       }\n//     }\n    \n//     case 'REMOVE_ITEM': {\n//       console.log('Removing item with menuItemId:', action.payload.menuItemId);\n//       const updatedItems = state.items.filter(\n//         (item) => item.menuItemId !== action.payload.menuItemId\n//       );\n//       return { ...state, items: updatedItems };\n//     }\n    \n//     case 'UPDATE_QUANTITY': {\n//       const { menuItemId, quantity } = action.payload;\n//       console.log('Updating quantity for item:', menuItemId, 'to', quantity);\n      \n//       if (quantity <= 0) {\n//         // Remove item if quantity is zero or less\n//         return cartReducer(state, { \n//           type: 'REMOVE_ITEM', \n//           payload: { menuItemId } \n//         });\n//       }\n      \n//       const updatedItems = state.items.map((item) =>\n//         item.menuItemId === menuItemId ? { ...item, quantity } : item\n//       );\n      \n//       return { ...state, items: updatedItems };\n//     }\n    \n//     case 'CLEAR_CART':\n//       console.log('Clearing cart');\n//       return initialState;\n      \n//     default:\n//       console.log('Unknown action type:', action.type);\n//       return state;\n//   }\n// }\n\n// export const CartContext = createContext(undefined);\n\n// export function CartProvider({ children }) {\n//   // Initialize cart state with localStorage if available\n//   const [state, dispatch] = useReducer(cartReducer, initialState, () => {\n//     try {\n//       if (typeof window !== 'undefined') {\n//         const savedCart = localStorage.getItem('cart');\n//         if (savedCart) {\n//           const parsedCart = JSON.parse(savedCart);\n//           console.log('Loaded cart from localStorage:', parsedCart);\n//           return { items: parsedCart };\n//         }\n//       }\n//     } catch (e) {\n//       console.error('Error loading cart from localStorage:', e);\n//     }\n//     return initialState;\n//   });\n\n//   // Save cart to localStorage whenever it changes\n//   useEffect(() => {\n//     try {\n//       if (typeof window !== 'undefined') {\n//         console.log('Saving cart to localStorage:', state.items);\n//         localStorage.setItem('cart', JSON.stringify(state.items));\n//       }\n//     } catch (e) {\n//       console.error('Error saving cart to localStorage:', e);\n//     }\n//   }, [state.items]);\n\n//   // Cart action functions with enhanced logging\n//   const addItem = useCallback((item) => {\n//     console.log('addItem function called with:', item);\n//     dispatch({ type: 'ADD_ITEM', payload: item });\n//   }, []);\n\n//   const removeItem = useCallback((menuItemId) => {\n//     console.log('removeItem function called with menuItemId:', menuItemId);\n//     dispatch({ type: 'REMOVE_ITEM', payload: { menuItemId } });\n//   }, []);\n\n//   const updateQuantity = useCallback((menuItemId, quantity) => {\n//     console.log('updateQuantity function called:', menuItemId, quantity);\n//     dispatch({ type: 'UPDATE_QUANTITY', payload: { menuItemId, quantity } });\n//   }, []);\n\n//   const clearCart = useCallback(() => {\n//     console.log('clearCart function called');\n//     dispatch({ type: 'CLEAR_CART' });\n//   }, []);\n\n//   // Calculate total price (without dividing by 100)\n//   const totalPrice = useMemo(() => {\n//     const total = state.items.reduce(\n//       (total, item) => total + item.price * item.quantity, \n//       0\n//     );\n//     console.log('Calculated totalPrice:', total);\n//     return total;\n//   }, [state.items]);\n\n//   // Calculate total items\n//   const totalItems = useMemo(() => {\n//     const count = state.items.reduce(\n//       (total, item) => total + item.quantity, \n//       0\n//     );\n//     console.log('Calculated totalItems:', count);\n//     return count;\n//   }, [state.items]);\n\n//   // Create the context value with all cart functions\n//   const value = useMemo(() => ({\n//     items: state.items,\n//     addItem,\n//     removeItem,\n//     updateQuantity,\n//     clearCart,\n//     totalPrice,\n//     totalItems,\n//   }), [\n//     state.items, \n//     addItem, \n//     removeItem, \n//     updateQuantity, \n//     clearCart, \n//     totalPrice, \n//     totalItems\n//   ]);\n\n//   return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n// }"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}